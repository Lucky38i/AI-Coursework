## Natural Language Toolkit: sem3.fcfg
##
## Alternative simple grammar with transitive verbs and 
## quantifiers for the book. 
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT

## modified by Alex MCBean, Nottingham Trent University

% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,SEM=<\P.P(farm)>] -> 'farm'
PropN[-LOC,NUM=sg,SEM=<\P.P(backyard)>] -> 'backyard'
PropN[-LOC,NUM=sg,SEM=<\P.P(farm2)>] -> 'farm2'

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'is'

N[NUM=pl,SEM=<\x.avocado(x)>] -> 'avocado'
N[NUM=pl,SEM=<\x.mango(x)>] -> 'mango'
N[NUM=pl,SEM=<\x.bananas(x)>] -> 'bananas'
N[NUM=pl,SEM=<\x.breadfruit(x)>] -> 'breadfruit'
N[NUM=pl,SEM=<\x.starfruit(x)>] -> 'starfruit'
N[NUM=pl,SEM=<\x.guinep(x)>] -> 'guinep'
N[NUM=pl,SEM=<\x.ackee(x)>] -> 'ackee'
N[NUM=pl,SEM=<\x.limes(x)>] -> 'limes'
N[NUM=pl,SEM=<\x.coconut(x)>] -> 'coconut'
N[NUM=pl,SEM=<\x.tamarind(x)>] -> 'tamarind'

TV[NUM=sg,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'is_in'
TV[NUM=pl,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'are_in'

P[+to] -> 'to'